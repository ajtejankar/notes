#!/usr/bin/env bash

########## config ###########
dropbox_dir=~/"Dropbox/work/notes"
home_dir=~/notes
notes_dirname=".notes"

# switch to control whether .notes directory is committed or not
((commit_notes='0'))

# following two strings have to be regex escaped
note_done_marker='✔'
note_todo_marker='☐'

first_todo="tasks.todo"
#############################

to_win_path() {
	# if leading slash is provided then change drive letter casing
	if [[ "${1:0:1}" = '/' ]]; then
		path="${1:2}"
		drive_letter="${1:1:1}"
		path="${drive_letter^^}:$path"
	else
		path="$1"
	fi

	# change unix style path separators to windows style
	path="${path//\//\\}"
	echo "$path"
}

create_link() {
	path="$(to_win_path "$1")"

	if [[ "$OS" = *Windows* ]]; then
		create_link.cmd "$notes_dirname" "$path"
	fi
}

init() {
	name="$(pwd)"
	name="${name##*/}"
	notes_dir="$dropbox_dir/$name"

  if ! [[ -d ~/Dropbox ]]; then
    notes_dir="$home_dir/$name"
  fi

	if ! git status &>/dev/null; then
		git init
	fi

	if ! [[ -d "$notes_dir" ]]; then
		mkdir -p "$notes_dir"
		mkdir "$notes_dir/prev"
		touch "$notes_dir/$first_todo"
		which subl &>/dev/null && subl "$notes_dir/$first_todo"
	fi

	create_link "$notes_dir"

	# we don't care if the no '.gitignore' file is present so squash the error
	if ! grep "$notes_dirname" '.gitignore' &>/dev/null && ! ((commit_notes)); then
		echo "$notes_dirname" >> '.gitignore'
		git add '.gitignore'
		git commit -m "add .notes dir to .gitignore"
		echo ""
		echo "================================"
		echo "To change the commit message run"
		echo "git commit --amend"
		echo "================================"
	fi
}

commit() {
	if ! [[ -d "$notes_dirname" ]]; then
		init
	fi

	for file in "$notes_dirname"/*; do
		if [[ -d "$file" ]]; then
			continue;
		fi

		prev_file="$notes_dirname/prev/${file##*/}"
		touch "$prev_file"
		# task_section="$(basename "$file")"
		# task_section="${task_section%\.*}"
		# echo -e "# $task_section\n"

		grep "$note_done_marker" "$file" | while read -r todo; do
			todo="${todo% @done*}"
			todo="$(sed -r "s/^\s*$note_done_marker\s*//" <<<"$todo")"
			prev_todo="$(grep "$todo" "$prev_file")"

			if [[ -z "$prev_todo" ]] || grep "$note_todo_marker" <<<"$prev_todo"; then
				echo "* $todo"
			fi
		done
	done > /tmp/commit_template

	if [[ -z "$(cat /tmp/commit_template)" ]]; then
    echo "No completed todos to commit"
		rm /tmp/commit_template
		exit 1
	fi

	# add newlines so that user can add the commit message
	sed -i '1s/^/\n\n/' /tmp/commit_template
	git commit -t /tmp/commit_template

	# if the user did enter a commit message then copy the files to prev dir
	if [[ "$?" == "0" ]]; then
		for file in "$notes_dirname"/*; do
			if [[ -d "$file" ]]; then
				continue;
			fi

			prev_file="$notes_dirname/prev/${file##*/}"
			cp "$file" "$prev_file"
		done
	fi

	rm /tmp/commit_template
}

help() {
	cat <<EOF
usage: notes <command>

Following commands can be used

init 	init a new note for the current project (needs admin command prompt)
commit 	create a commit with done todos
help 	print this help message
EOF
}

command="$1"

case "$command" in
	"init") init ;;
	"commit") commit ;;
	"help") help ;;
	"") help ;;
esac
